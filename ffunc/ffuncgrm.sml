local
in
datatype token =
    ARRO
  | ASIGN
  | COMA
  | DIST
  | DIV
  | DOSP
  | ELSE
  | END
  | EOF
  | FLECHA
  | FN
  | FUN
  | ID of string
  | IF
  | IGUAL
  | MAS
  | MAYIG
  | MAYOR
  | MENIG
  | MENOR
  | MENOS
  | NRO of int
  | PCOMA
  | PD
  | PI
  | POR
  | PRINT
  | THEN
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";

open ffuncast
(* Line 7, file ffuncgrm.sml *)
val yytransl = #[
  257 (* ARRO *),
  258 (* ASIGN *),
  259 (* COMA *),
  260 (* DIST *),
  261 (* DIV *),
  262 (* DOSP *),
  263 (* ELSE *),
  264 (* END *),
  265 (* EOF *),
  266 (* FLECHA *),
  267 (* FN *),
  268 (* FUN *),
  269 (* ID *),
  270 (* IF *),
  271 (* IGUAL *),
  272 (* MAS *),
  273 (* MAYIG *),
  274 (* MAYOR *),
  275 (* MENIG *),
  276 (* MENOR *),
  277 (* MENOS *),
  278 (* NRO *),
  279 (* PCOMA *),
  280 (* PD *),
  281 (* PI *),
  282 (* POR *),
  283 (* PRINT *),
  284 (* THEN *),
    0];

val yylhs = "\255\255\
\\001\000\002\000\002\000\003\000\005\000\005\000\006\000\006\000\
\\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\\004\000\004\000\004\000\004\000\007\000\007\000\008\000\008\000\
\\000\000";

val yylen = "\002\000\
\\003\000\002\000\000\000\008\000\002\000\000\000\003\000\000\000\
\\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\003\000\004\000\003\000\003\000\
\\003\000\006\000\002\000\005\000\002\000\000\000\003\000\000\000\
\\002\000";

val yydefred = "\000\000\
\\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\009\000\000\000\000\000\000\000\002\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\005\000\000\000\000\000\000\000\029\000\022\000\000\000\000\000\
\\000\000\028\000\000\000\000\000\007\000\000\000\031\000\000\000\
\\004\000";

val yydgoto = "\002\000\
\\004\000\005\000\006\000\014\000\037\000\057\000\041\000\061\000";

val yysindex = "\003\000\
\\245\254\000\000\248\254\000\000\191\000\245\254\247\254\021\255\
\\005\255\191\000\000\000\191\000\191\000\217\255\000\000\022\255\
\\026\255\191\000\191\000\096\255\240\255\100\000\191\000\191\000\
\\191\000\000\000\191\000\191\000\191\000\191\000\191\000\191\000\
\\191\000\191\000\191\000\034\255\014\255\191\000\100\000\008\000\
\\015\255\191\000\000\000\000\000\102\255\039\255\102\255\028\255\
\\102\255\102\255\102\255\102\255\028\255\100\000\039\255\029\255\
\\000\000\035\255\031\000\191\000\000\000\000\000\054\000\034\255\
\\191\000\000\000\008\000\191\000\000\000\077\000\000\000\100\000\
\\000\000";

val yyrindex = "\000\000\
\\195\000\000\000\000\000\000\000\000\000\195\000\000\000\000\000\
\\044\255\000\000\000\000\000\000\000\000\000\000\000\000\019\255\
\\000\000\000\000\020\255\000\000\000\000\003\255\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\032\255\000\000\000\000\099\000\033\255\
\\000\000\000\000\000\000\070\255\121\000\122\255\128\000\174\255\
\\131\000\139\000\157\000\165\000\196\255\168\000\148\255\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\255\
\\000\000\000\000\033\255\000\000\000\000\000\000\000\000\175\000\
\\000\000";

val yygindex = "\000\000\
\\000\000\040\000\000\000\246\255\000\000\002\000\000\000\009\000";

val YYTABLESIZE = 478;
val yytable = "\020\000\
\\003\000\021\000\022\000\001\000\007\000\027\000\018\000\039\000\
\\040\000\027\000\027\000\027\000\044\000\045\000\046\000\016\000\
\\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\\055\000\027\000\027\000\059\000\023\000\019\000\027\000\063\000\
\\025\000\017\000\036\000\038\000\056\000\058\000\062\000\023\000\
\\065\000\064\000\006\000\030\000\010\000\015\000\010\000\010\000\
\\010\000\067\000\010\000\010\000\010\000\035\000\070\000\008\000\
\\032\000\072\000\010\000\010\000\010\000\010\000\010\000\010\000\
\\010\000\069\000\010\000\010\000\000\000\010\000\021\000\010\000\
\\021\000\021\000\021\000\071\000\021\000\021\000\021\000\000\000\
\\000\000\000\000\000\000\000\000\021\000\021\000\021\000\021\000\
\\021\000\021\000\021\000\000\000\021\000\021\000\000\000\021\000\
\\023\000\021\000\000\000\024\000\025\000\000\000\023\000\000\000\
\\000\000\000\000\025\000\000\000\000\000\000\000\027\000\028\000\
\\029\000\030\000\031\000\032\000\033\000\028\000\034\000\000\000\
\\000\000\035\000\033\000\042\000\014\000\014\000\014\000\035\000\
\\014\000\014\000\014\000\000\000\000\000\000\000\000\000\000\000\
\\014\000\014\000\014\000\014\000\014\000\014\000\014\000\000\000\
\\014\000\014\000\000\000\014\000\000\000\014\000\013\000\013\000\
\\013\000\000\000\013\000\013\000\013\000\000\000\000\000\000\000\
\\000\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\\013\000\000\000\013\000\013\000\000\000\013\000\000\000\013\000\
\\011\000\011\000\000\000\000\000\011\000\011\000\011\000\000\000\
\\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\
\\011\000\011\000\011\000\000\000\011\000\011\000\012\000\012\000\
\\000\000\011\000\012\000\012\000\012\000\000\000\000\000\000\000\
\\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\\012\000\023\000\012\000\012\000\024\000\025\000\000\000\012\000\
\\000\000\026\000\000\000\000\000\000\000\000\000\000\000\027\000\
\\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\\023\000\000\000\035\000\024\000\025\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\\029\000\030\000\031\000\032\000\033\000\000\000\034\000\043\000\
\\023\000\035\000\060\000\024\000\025\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\\029\000\030\000\031\000\032\000\033\000\000\000\034\000\023\000\
\\000\000\035\000\024\000\025\000\000\000\000\000\066\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\027\000\028\000\029\000\
\\030\000\031\000\032\000\033\000\000\000\034\000\023\000\000\000\
\\035\000\024\000\025\000\000\000\068\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\027\000\028\000\029\000\030\000\
\\031\000\032\000\033\000\000\000\034\000\023\000\000\000\035\000\
\\024\000\025\000\000\000\000\000\073\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\027\000\028\000\029\000\030\000\031\000\
\\032\000\033\000\000\000\034\000\023\000\025\000\035\000\024\000\
\\025\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\027\000\028\000\029\000\030\000\031\000\032\000\
\\033\000\025\000\025\000\020\000\000\000\035\000\025\000\020\000\
\\020\000\020\000\015\000\000\000\000\000\019\000\015\000\015\000\
\\015\000\019\000\019\000\019\000\000\000\018\000\000\000\020\000\
\\020\000\018\000\018\000\018\000\020\000\000\000\015\000\015\000\
\\000\000\019\000\019\000\015\000\000\000\000\000\019\000\017\000\
\\000\000\018\000\018\000\017\000\017\000\017\000\018\000\016\000\
\\000\000\000\000\024\000\016\000\016\000\016\000\024\000\024\000\
\\024\000\026\000\000\000\017\000\017\000\026\000\026\000\026\000\
\\017\000\000\000\000\000\016\000\016\000\000\000\024\000\024\000\
\\016\000\000\000\000\000\024\000\000\000\026\000\026\000\000\000\
\\000\000\008\000\026\000\009\000\010\000\003\000\000\000\003\000\
\\003\000\000\000\000\000\000\000\011\000\000\000\000\000\012\000\
\\003\000\013\000\000\000\003\000\000\000\003\000";

val yycheck = "\010\000\
\\012\001\012\000\013\000\001\000\013\001\003\001\002\001\018\000\
\\019\000\007\001\008\001\009\001\023\000\024\000\025\000\025\001\
\\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\\035\000\023\001\024\001\038\000\001\001\025\001\028\001\042\000\
\\005\001\013\001\013\001\010\001\003\001\024\001\024\001\001\001\
\\006\001\013\001\024\001\024\001\001\001\006\000\003\001\004\001\
\\005\001\060\000\007\001\008\001\009\001\026\001\065\000\024\001\
\\024\001\068\000\015\001\016\001\017\001\018\001\019\001\020\001\
\\021\001\064\000\023\001\024\001\255\255\026\001\001\001\028\001\
\\003\001\004\001\005\001\067\000\007\001\008\001\009\001\255\255\
\\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\\019\001\020\001\021\001\255\255\023\001\024\001\255\255\026\001\
\\001\001\028\001\255\255\004\001\005\001\255\255\001\001\255\255\
\\255\255\255\255\005\001\255\255\255\255\255\255\015\001\016\001\
\\017\001\018\001\019\001\020\001\021\001\016\001\023\001\255\255\
\\255\255\026\001\021\001\028\001\003\001\004\001\005\001\026\001\
\\007\001\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\\023\001\024\001\255\255\026\001\255\255\028\001\003\001\004\001\
\\005\001\255\255\007\001\008\001\009\001\255\255\255\255\255\255\
\\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\\021\001\255\255\023\001\024\001\255\255\026\001\255\255\028\001\
\\003\001\004\001\255\255\255\255\007\001\008\001\009\001\255\255\
\\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\\019\001\020\001\021\001\255\255\023\001\024\001\003\001\004\001\
\\255\255\028\001\007\001\008\001\009\001\255\255\255\255\255\255\
\\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\\021\001\001\001\023\001\024\001\004\001\005\001\255\255\028\001\
\\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\\016\001\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\\001\001\255\255\026\001\004\001\005\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\\017\001\018\001\019\001\020\001\021\001\255\255\023\001\024\001\
\\001\001\026\001\003\001\004\001\005\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\\017\001\018\001\019\001\020\001\021\001\255\255\023\001\001\001\
\\255\255\026\001\004\001\005\001\255\255\255\255\008\001\255\255\
\\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\\018\001\019\001\020\001\021\001\255\255\023\001\001\001\255\255\
\\026\001\004\001\005\001\255\255\007\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\\019\001\020\001\021\001\255\255\023\001\001\001\255\255\026\001\
\\004\001\005\001\255\255\255\255\008\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\\020\001\021\001\255\255\023\001\001\001\003\001\026\001\004\001\
\\005\001\007\001\008\001\009\001\255\255\255\255\255\255\255\255\
\\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\\021\001\023\001\024\001\003\001\255\255\026\001\028\001\007\001\
\\008\001\009\001\003\001\255\255\255\255\003\001\007\001\008\001\
\\009\001\007\001\008\001\009\001\255\255\003\001\255\255\023\001\
\\024\001\007\001\008\001\009\001\028\001\255\255\023\001\024\001\
\\255\255\023\001\024\001\028\001\255\255\255\255\028\001\003\001\
\\255\255\023\001\024\001\007\001\008\001\009\001\028\001\003\001\
\\255\255\255\255\003\001\007\001\008\001\009\001\007\001\008\001\
\\009\001\003\001\255\255\023\001\024\001\007\001\008\001\009\001\
\\028\001\255\255\255\255\023\001\024\001\255\255\023\001\024\001\
\\028\001\255\255\255\255\028\001\255\255\023\001\024\001\255\255\
\\255\255\011\001\028\001\013\001\014\001\011\001\255\255\013\001\
\\014\001\255\255\255\255\255\255\022\001\255\255\255\255\025\001\
\\022\001\027\001\255\255\025\001\255\255\027\001";

val yyact = vector_ 34 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file ffuncgrm.y, line 30 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Decl list
val d__2__ = peekVal 1 : ffuncast.Expr
in
( ((d__1__), (d__2__)) ) end : ffuncast.Decl list * ffuncast.Expr))
;
(* Rule 2, file ffuncgrm.y, line 32 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 1 : ffuncast.Decl
val d__2__ = peekVal 0 : ffuncast.Decl list
in
( (d__1__)::(d__2__) ) end : ffuncast.Decl list))
;
(* Rule 3, file ffuncgrm.y, line 33 *)
val _ = update_ yyact 3
(fn () => repr(let
in
( [] ) end : ffuncast.Decl list))
;
(* Rule 4, file ffuncgrm.y, line 35 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__2__ = peekVal 6 : string
val d__4__ = peekVal 4 : string list
val d__7__ = peekVal 1 : ffuncast.Expr
in
( Func{func=(d__2__), args=(d__4__), body=(d__7__)} ) end : ffuncast.Decl))
;
(* Rule 5, file ffuncgrm.y, line 37 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 1 : string
val d__2__ = peekVal 0 : string list
in
( (d__1__)::(d__2__) ) end : string list))
;
(* Rule 6, file ffuncgrm.y, line 38 *)
val _ = update_ yyact 6
(fn () => repr(let
in
( [] ) end : string list))
;
(* Rule 7, file ffuncgrm.y, line 40 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__2__ = peekVal 1 : string
val d__3__ = peekVal 0 : string list
in
( (d__2__)::(d__3__) ) end : string list))
;
(* Rule 8, file ffuncgrm.y, line 41 *)
val _ = update_ yyact 8
(fn () => repr(let
in
( [] ) end : string list))
;
(* Rule 9, file ffuncgrm.y, line 43 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__1__ = peekVal 0 : int
in
( Nro (d__1__) ) end : ffuncast.Expr))
;
(* Rule 10, file ffuncgrm.y, line 44 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 0 : string
in
( Id (d__1__) ) end : ffuncast.Expr))
;
(* Rule 11, file ffuncgrm.y, line 45 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Suma((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 12, file ffuncgrm.y, line 46 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Resta((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 13, file ffuncgrm.y, line 47 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Prod((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 14, file ffuncgrm.y, line 48 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Div((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 15, file ffuncgrm.y, line 49 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Igual, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 16, file ffuncgrm.y, line 50 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Menor, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 17, file ffuncgrm.y, line 51 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(MenIg, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 18, file ffuncgrm.y, line 52 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Mayor, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 19, file ffuncgrm.y, line 53 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(MayIg, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 20, file ffuncgrm.y, line 54 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Dist, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 21, file ffuncgrm.y, line 55 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( App((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 22, file ffuncgrm.y, line 56 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__1__ = peekVal 3 : string
val d__3__ = peekVal 1 : ffuncast.Expr list
in
( Call((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 23, file ffuncgrm.y, line 57 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__2__ = peekVal 1 : ffuncast.Expr
in
( (d__2__) ) end : ffuncast.Expr))
;
(* Rule 24, file ffuncgrm.y, line 58 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Sec((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 25, file ffuncgrm.y, line 59 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__1__ = peekVal 2 : string
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Asign((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 26, file ffuncgrm.y, line 60 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__2__ = peekVal 4 : ffuncast.Expr
val d__4__ = peekVal 2 : ffuncast.Expr
val d__6__ = peekVal 0 : ffuncast.Expr
in
( If((d__2__), (d__4__), (d__6__)) ) end : ffuncast.Expr))
;
(* Rule 27, file ffuncgrm.y, line 61 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__2__ = peekVal 0 : ffuncast.Expr
in
( Print (d__2__) ) end : ffuncast.Expr))
;
(* Rule 28, file ffuncgrm.y, line 62 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__2__ = peekVal 3 : string
val d__4__ = peekVal 1 : ffuncast.Expr
in
( Lambda((d__2__), (d__4__)) ) end : ffuncast.Expr))
;
(* Rule 29, file ffuncgrm.y, line 64 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__1__ = peekVal 1 : ffuncast.Expr
val d__2__ = peekVal 0 : ffuncast.Expr list
in
( (d__1__)::(d__2__) ) end : ffuncast.Expr list))
;
(* Rule 30, file ffuncgrm.y, line 65 *)
val _ = update_ yyact 30
(fn () => repr(let
in
( [] ) end : ffuncast.Expr list))
;
(* Rule 31, file ffuncgrm.y, line 67 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__2__ = peekVal 1 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr list
in
( (d__2__)::(d__3__) ) end : ffuncast.Expr list))
;
(* Rule 32, file ffuncgrm.y, line 68 *)
val _ = update_ yyact 32
(fn () => repr(let
in
( [] ) end : ffuncast.Expr list))
;
(* Entry prog *)
val _ = update_ yyact 33 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
