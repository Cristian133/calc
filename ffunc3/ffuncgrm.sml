local
in
datatype token =
    ARROBA
  | ASIGN
  | COMA
  | CR
  | DIST
  | DIV
  | DOSP
  | ELSE
  | END
  | EOF
  | FLECHA
  | FUN
  | ID of string
  | IF
  | IGUAL
  | IN
  | LET
  | MAS
  | MAYIG
  | MAYOR
  | MENIG
  | MENOR
  | MENOS
  | NRO of int
  | PCOMA
  | PD
  | PI
  | POR
  | PRINT
  | PUNTO
  | READ
  | TEXTO of string
  | THEN
  | TIPO of ffunctipo.Tipo
  | UNIT
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";

open ffuncast
(* Line 7, file ffuncgrm.sml *)
val yytransl = #[
  257 (* ARROBA *),
  258 (* ASIGN *),
  259 (* COMA *),
  260 (* CR *),
  261 (* DIST *),
  262 (* DIV *),
  263 (* DOSP *),
  264 (* ELSE *),
  265 (* END *),
  266 (* EOF *),
  267 (* FLECHA *),
  268 (* FUN *),
  269 (* ID *),
  270 (* IF *),
  271 (* IGUAL *),
  272 (* IN *),
  273 (* LET *),
  274 (* MAS *),
  275 (* MAYIG *),
  276 (* MAYOR *),
  277 (* MENIG *),
  278 (* MENOR *),
  279 (* MENOS *),
  280 (* NRO *),
  281 (* PCOMA *),
  282 (* PD *),
  283 (* PI *),
  284 (* POR *),
  285 (* PRINT *),
  286 (* PUNTO *),
  287 (* READ *),
  288 (* TEXTO *),
  289 (* THEN *),
  290 (* TIPO *),
  291 (* UNIT *),
    0];

val yylhs = "\255\255\
\\001\000\002\000\002\000\003\000\010\000\010\000\010\000\011\000\
\\012\000\012\000\004\000\004\000\004\000\004\000\004\000\004\000\
\\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\\004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\\005\000\006\000\006\000\006\000\006\000\009\000\007\000\008\000\
\\008\000\000\000";

val yylen = "\002\000\
\\002\000\002\000\000\000\012\000\001\000\003\000\003\000\002\000\
\\003\000\000\000\001\000\001\000\001\000\001\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\001\000\003\000\003\000\006\000\005\000\001\000\001\000\003\000\
\\003\000\004\000\001\000\002\000\003\000\003\000\004\000\003\000\
\\000\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\035\000\031\000\000\000\000\000\011\000\000\000\
\\000\000\000\000\012\000\013\000\042\000\000\000\000\000\030\000\
\\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\036\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\002\000\000\000\026\000\038\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\\000\000\000\000\000\000\034\000\000\000\000\000\029\000\000\000\
\\039\000\000\000\000\000\000\000\000\000\005\000\000\000\040\000\
\\000\000\000\000\000\000\000\000\000\000\008\000\007\000\000\000\
\\000\000\000\000\000\000\009\000\000\000\000\000\004\000";

val yydgoto = "\002\000\
\\013\000\020\000\021\000\014\000\015\000\016\000\023\000\073\000\
\\017\000\079\000\082\000\086\000";

val yysindex = "\005\000\
\\201\000\000\000\000\000\000\000\201\000\251\254\000\000\201\000\
\\244\254\004\255\000\000\000\000\000\000\130\255\009\255\000\000\
\\000\000\141\255\011\255\021\255\251\254\105\255\015\255\201\000\
\\000\000\201\000\201\000\201\000\000\000\201\000\201\000\201\000\
\\201\000\201\000\201\000\201\000\201\000\201\000\201\000\252\254\
\\201\000\020\255\201\000\000\000\201\000\000\000\000\000\166\255\
\\066\000\184\000\014\255\184\000\007\255\184\000\184\000\184\000\
\\184\000\007\255\055\000\014\255\031\000\000\000\000\000\191\255\
\\039\255\215\255\239\255\000\000\201\000\046\255\000\000\201\000\
\\000\000\055\000\240\254\239\255\240\254\000\000\246\254\000\000\
\\001\255\028\255\240\254\049\255\240\254\000\000\000\000\000\000\
\\240\254\001\255\250\254\000\000\201\000\007\000\000\000";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\041\255\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\076\255\000\000\
\\000\000\000\000\000\000\000\000\041\255\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\087\000\214\000\096\000\235\000\152\000\246\000\249\000\019\001\
\\022\001\178\000\031\001\125\000\000\000\040\255\000\000\000\000\
\\000\000\000\000\043\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\050\001\000\000\043\255\000\000\000\000\000\000\000\000\
\\045\255\000\000\000\000\000\000\000\000\000\000\000\000\103\255\
\\000\000\045\255\000\000\000\000\000\000\000\000\000\000";

val yygindex = "\000\000\
\\000\000\051\000\000\000\251\255\035\000\000\000\000\000\255\255\
\\000\000\181\255\000\000\242\255";

val YYTABLESIZE = 595;
val yytable = "\018\000\
\\083\000\081\000\022\000\085\000\083\000\001\000\019\000\088\000\
\\093\000\090\000\077\000\083\000\028\000\091\000\024\000\084\000\
\\025\000\078\000\048\000\063\000\049\000\050\000\051\000\042\000\
\\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\\060\000\061\000\038\000\064\000\043\000\066\000\040\000\067\000\
\\047\000\014\000\033\000\039\000\014\000\014\000\065\000\033\000\
\\033\000\033\000\039\000\070\000\075\000\087\000\014\000\089\000\
\\003\000\014\000\014\000\014\000\014\000\014\000\014\000\074\000\
\\014\000\033\000\076\000\014\000\041\000\033\000\010\000\044\000\
\\033\000\062\000\080\000\092\000\014\000\014\000\014\000\000\000\
\\014\000\014\000\000\000\014\000\014\000\014\000\000\000\094\000\
\\000\000\000\000\014\000\000\000\000\000\014\000\014\000\014\000\
\\014\000\014\000\014\000\000\000\014\000\014\000\000\000\014\000\
\\000\000\006\000\026\000\045\000\014\000\027\000\028\000\000\000\
\\014\000\006\000\000\000\000\000\000\000\006\000\000\000\030\000\
\\000\000\000\000\031\000\032\000\033\000\034\000\035\000\036\000\
\\006\000\037\000\046\000\026\000\038\000\000\000\027\000\028\000\
\\000\000\000\000\000\000\029\000\000\000\039\000\026\000\000\000\
\\030\000\027\000\028\000\031\000\032\000\033\000\034\000\035\000\
\\036\000\000\000\037\000\030\000\000\000\038\000\031\000\032\000\
\\033\000\034\000\035\000\036\000\000\000\037\000\039\000\026\000\
\\038\000\000\000\027\000\028\000\000\000\041\000\000\000\000\000\
\\000\000\039\000\000\000\000\000\030\000\000\000\000\000\031\000\
\\032\000\033\000\034\000\035\000\036\000\000\000\037\000\068\000\
\\026\000\038\000\000\000\027\000\028\000\000\000\069\000\000\000\
\\000\000\000\000\039\000\000\000\000\000\030\000\000\000\000\000\
\\031\000\032\000\033\000\034\000\035\000\036\000\000\000\037\000\
\\026\000\000\000\038\000\027\000\028\000\000\000\000\000\071\000\
\\000\000\000\000\000\000\039\000\000\000\030\000\000\000\000\000\
\\031\000\032\000\033\000\034\000\035\000\036\000\000\000\037\000\
\\026\000\072\000\038\000\027\000\028\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\039\000\000\000\030\000\000\000\000\000\
\\031\000\032\000\033\000\034\000\035\000\036\000\000\000\037\000\
\\026\000\000\000\038\000\027\000\028\000\000\000\000\000\095\000\
\\000\000\000\000\000\000\039\000\000\000\030\000\000\000\000\000\
\\031\000\032\000\033\000\034\000\035\000\036\000\000\000\037\000\
\\026\000\000\000\038\000\027\000\028\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\039\000\000\000\030\000\000\000\000\000\
\\031\000\032\000\033\000\034\000\035\000\036\000\000\000\037\000\
\\026\000\000\000\038\000\027\000\028\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\039\000\000\000\030\000\027\000\028\000\
\\031\000\032\000\033\000\034\000\035\000\036\000\000\000\000\000\
\\030\000\000\000\038\000\031\000\032\000\033\000\034\000\035\000\
\\036\000\037\000\000\000\039\000\000\000\038\000\037\000\037\000\
\\037\000\018\000\018\000\000\000\018\000\018\000\039\000\018\000\
\\018\000\018\000\000\000\000\000\000\000\000\000\018\000\037\000\
\\037\000\018\000\018\000\018\000\018\000\018\000\018\000\037\000\
\\018\000\018\000\000\000\018\000\000\000\000\000\017\000\017\000\
\\018\000\017\000\017\000\000\000\017\000\017\000\017\000\000\000\
\\000\000\000\000\000\000\017\000\000\000\000\000\017\000\017\000\
\\017\000\017\000\017\000\017\000\000\000\017\000\017\000\000\000\
\\017\000\015\000\015\000\000\000\015\000\017\000\000\000\015\000\
\\015\000\015\000\000\000\000\000\000\000\000\000\015\000\000\000\
\\000\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
\\015\000\015\000\000\000\016\000\016\000\000\000\016\000\000\000\
\\015\000\016\000\016\000\016\000\000\000\028\000\000\000\000\000\
\\016\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
\\016\000\031\000\016\000\016\000\003\000\000\000\036\000\000\000\
\\000\000\000\000\016\000\038\000\000\000\004\000\005\000\024\000\
\\024\000\006\000\000\000\000\000\039\000\024\000\024\000\024\000\
\\007\000\000\000\000\000\008\000\000\000\009\000\000\000\010\000\
\\011\000\000\000\000\000\012\000\019\000\019\000\024\000\024\000\
\\000\000\000\000\019\000\019\000\019\000\000\000\024\000\023\000\
\\023\000\000\000\022\000\022\000\000\000\023\000\023\000\023\000\
\\022\000\022\000\022\000\019\000\019\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\019\000\000\000\000\000\023\000\023\000\
\\000\000\022\000\022\000\000\000\021\000\021\000\023\000\020\000\
\\020\000\022\000\021\000\021\000\021\000\020\000\020\000\020\000\
\\000\000\027\000\000\000\000\000\000\000\000\000\027\000\027\000\
\\027\000\000\000\000\000\021\000\021\000\000\000\020\000\020\000\
\\000\000\000\000\000\000\021\000\028\000\000\000\020\000\027\000\
\\027\000\028\000\028\000\028\000\000\000\000\000\000\000\027\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\028\000\028\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\028\000";

val yycheck = "\005\000\
\\011\001\077\000\008\000\003\001\011\001\001\000\012\001\083\000\
\\015\001\085\000\027\001\011\001\006\001\089\000\027\001\026\001\
\\013\001\034\001\024\000\024\001\026\000\027\000\028\000\013\001\
\\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\\038\000\039\000\028\001\041\000\016\001\043\000\030\001\045\000\
\\026\001\002\001\003\001\037\001\005\001\006\001\027\001\008\001\
\\009\001\010\001\037\001\013\001\007\001\026\001\015\001\007\001\
\\016\001\018\001\019\001\020\001\021\001\022\001\023\001\069\000\
\\025\001\026\001\072\000\028\001\026\001\030\001\026\001\021\000\
\\033\001\039\000\076\000\090\000\037\001\002\001\003\001\255\255\
\\005\001\006\001\255\255\008\001\009\001\010\001\255\255\093\000\
\\255\255\255\255\015\001\255\255\255\255\018\001\019\001\020\001\
\\021\001\022\001\023\001\255\255\025\001\026\001\255\255\028\001\
\\255\255\003\001\002\001\003\001\033\001\005\001\006\001\255\255\
\\037\001\011\001\255\255\255\255\255\255\015\001\255\255\015\001\
\\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\\026\001\025\001\026\001\002\001\028\001\255\255\005\001\006\001\
\\255\255\255\255\255\255\010\001\255\255\037\001\002\001\255\255\
\\015\001\005\001\006\001\018\001\019\001\020\001\021\001\022\001\
\\023\001\255\255\025\001\015\001\255\255\028\001\018\001\019\001\
\\020\001\021\001\022\001\023\001\255\255\025\001\037\001\002\001\
\\028\001\255\255\005\001\006\001\255\255\033\001\255\255\255\255\
\\255\255\037\001\255\255\255\255\015\001\255\255\255\255\018\001\
\\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\\002\001\028\001\255\255\005\001\006\001\255\255\008\001\255\255\
\\255\255\255\255\037\001\255\255\255\255\015\001\255\255\255\255\
\\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\\002\001\255\255\028\001\005\001\006\001\255\255\255\255\009\001\
\\255\255\255\255\255\255\037\001\255\255\015\001\255\255\255\255\
\\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\\002\001\003\001\028\001\005\001\006\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\037\001\255\255\015\001\255\255\255\255\
\\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\\002\001\255\255\028\001\005\001\006\001\255\255\255\255\009\001\
\\255\255\255\255\255\255\037\001\255\255\015\001\255\255\255\255\
\\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\\002\001\255\255\028\001\005\001\006\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\037\001\255\255\015\001\255\255\255\255\
\\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\\002\001\255\255\028\001\005\001\006\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\037\001\255\255\015\001\005\001\006\001\
\\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\\015\001\255\255\028\001\018\001\019\001\020\001\021\001\022\001\
\\023\001\003\001\255\255\037\001\255\255\028\001\008\001\009\001\
\\010\001\002\001\003\001\255\255\005\001\006\001\037\001\008\001\
\\009\001\010\001\255\255\255\255\255\255\255\255\015\001\025\001\
\\026\001\018\001\019\001\020\001\021\001\022\001\023\001\033\001\
\\025\001\026\001\255\255\028\001\255\255\255\255\002\001\003\001\
\\033\001\005\001\006\001\255\255\008\001\009\001\010\001\255\255\
\\255\255\255\255\255\255\015\001\255\255\255\255\018\001\019\001\
\\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\\028\001\002\001\003\001\255\255\005\001\033\001\255\255\008\001\
\\009\001\010\001\255\255\255\255\255\255\255\255\015\001\255\255\
\\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\\025\001\026\001\255\255\002\001\003\001\255\255\005\001\255\255\
\\033\001\008\001\009\001\010\001\255\255\006\001\255\255\255\255\
\\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\\023\001\018\001\025\001\026\001\004\001\255\255\023\001\255\255\
\\255\255\255\255\033\001\028\001\255\255\013\001\014\001\002\001\
\\003\001\017\001\255\255\255\255\037\001\008\001\009\001\010\001\
\\024\001\255\255\255\255\027\001\255\255\029\001\255\255\031\001\
\\032\001\255\255\255\255\035\001\002\001\003\001\025\001\026\001\
\\255\255\255\255\008\001\009\001\010\001\255\255\033\001\002\001\
\\003\001\255\255\002\001\003\001\255\255\008\001\009\001\010\001\
\\008\001\009\001\010\001\025\001\026\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\033\001\255\255\255\255\025\001\026\001\
\\255\255\025\001\026\001\255\255\002\001\003\001\033\001\002\001\
\\003\001\033\001\008\001\009\001\010\001\008\001\009\001\010\001\
\\255\255\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\\010\001\255\255\255\255\025\001\026\001\255\255\025\001\026\001\
\\255\255\255\255\255\255\033\001\003\001\255\255\033\001\025\001\
\\026\001\008\001\009\001\010\001\255\255\255\255\255\255\033\001\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\025\001\026\001\255\255\255\255\255\255\255\255\
\\255\255\255\255\033\001";

val yyact = vector_ 43 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file ffuncgrm.y, line 37 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 1 : ffuncast.Expr
in
( (d__1__) ) end : ffuncast.Expr))
;
(* Rule 2, file ffuncgrm.y, line 39 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 1 : ffuncast.Decl
val d__2__ = peekVal 0 : ffuncast.Decl list
in
( (d__1__)::(d__2__) ) end : ffuncast.Decl list))
;
(* Rule 3, file ffuncgrm.y, line 40 *)
val _ = update_ yyact 3
(fn () => repr(let
in
( [] ) end : ffuncast.Decl list))
;
(* Rule 4, file ffuncgrm.y, line 43 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__2__ = peekVal 10 : string
val d__4__ = peekVal 8 : string
val d__6__ = peekVal 6 : ffunctipo.Tipo
val d__9__ = peekVal 3 : ffunctipo.Tipo
val d__11__ = peekVal 1 : ffuncast.Expr
in
( Func{f=(d__2__), arg=((d__4__), (d__6__)), body=(d__11__), tipo=(d__9__), pr=0} ) end : ffuncast.Decl))
;
(* Rule 5, file ffuncgrm.y, line 45 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 0 : ffunctipo.Tipo
in
( (d__1__) ) end : ffunctipo.Tipo))
;
(* Rule 6, file ffuncgrm.y, line 46 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 2 : ffunctipo.Tipo
val d__3__ = peekVal 0 : ffunctipo.Tipo
in
( TF((d__1__), (d__3__)) ) end : ffunctipo.Tipo))
;
(* Rule 7, file ffuncgrm.y, line 47 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__2__ = peekVal 1 : ffunctipo.Tipo list
in
( TT (d__2__) ) end : ffunctipo.Tipo))
;
(* Rule 8, file ffuncgrm.y, line 49 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 1 : ffunctipo.Tipo
val d__2__ = peekVal 0 : ffunctipo.Tipo list
in
( (d__1__)::(d__2__) ) end : ffunctipo.Tipo list))
;
(* Rule 9, file ffuncgrm.y, line 51 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__2__ = peekVal 1 : ffunctipo.Tipo
val d__3__ = peekVal 0 : ffunctipo.Tipo list
in
( (d__2__)::(d__3__) ) end : ffunctipo.Tipo list))
;
(* Rule 10, file ffuncgrm.y, line 52 *)
val _ = update_ yyact 10
(fn () => repr(let
in
( [] ) end : ffunctipo.Tipo list))
;
(* Rule 11, file ffuncgrm.y, line 54 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 0 : int
in
( Nro (d__1__) ) end : ffuncast.Expr))
;
(* Rule 12, file ffuncgrm.y, line 55 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 0 : string
in
( Texto (d__1__) ) end : ffuncast.Expr))
;
(* Rule 13, file ffuncgrm.y, line 56 *)
val _ = update_ yyact 13
(fn () => repr(let
in
( Unit ) end : ffuncast.Expr))
;
(* Rule 14, file ffuncgrm.y, line 57 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 0 : ffuncast.Expr
in
( (d__1__) ) end : ffuncast.Expr))
;
(* Rule 15, file ffuncgrm.y, line 58 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Oper(Suma, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 16, file ffuncgrm.y, line 59 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Oper(Resta, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 17, file ffuncgrm.y, line 60 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Oper(Prod, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 18, file ffuncgrm.y, line 61 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Oper(Div, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 19, file ffuncgrm.y, line 62 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Igual, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 20, file ffuncgrm.y, line 63 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Menor, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 21, file ffuncgrm.y, line 64 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(MenIg, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 22, file ffuncgrm.y, line 65 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Mayor, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 23, file ffuncgrm.y, line 66 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(MayIg, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 24, file ffuncgrm.y, line 67 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Cmp(Dist, (d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 25, file ffuncgrm.y, line 68 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__1__ = peekVal 0 : ffuncast.Expr list
in
( Tupla (d__1__) ) end : ffuncast.Expr))
;
(* Rule 26, file ffuncgrm.y, line 69 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__2__ = peekVal 1 : ffuncast.Expr
in
( (d__2__) ) end : ffuncast.Expr))
;
(* Rule 27, file ffuncgrm.y, line 70 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Sec((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 28, file ffuncgrm.y, line 71 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__2__ = peekVal 4 : ffuncast.Expr
val d__4__ = peekVal 2 : ffuncast.Expr
val d__6__ = peekVal 0 : ffuncast.Expr
in
( If((d__2__), (d__4__), (d__6__)) ) end : ffuncast.Expr))
;
(* Rule 29, file ffuncgrm.y, line 72 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__2__ = peekVal 3 : ffuncast.Decl list
val d__4__ = peekVal 1 : ffuncast.Expr
in
( Let((d__2__), (d__4__)) ) end : ffuncast.Expr))
;
(* Rule 30, file ffuncgrm.y, line 73 *)
val _ = update_ yyact 30
(fn () => repr(let
val d__1__ = peekVal 0 : ffuncast.Expr
in
( (d__1__) ) end : ffuncast.Expr))
;
(* Rule 31, file ffuncgrm.y, line 75 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__1__ = peekVal 0 : string
in
( Id (d__1__) ) end : ffuncast.Expr))
;
(* Rule 32, file ffuncgrm.y, line 76 *)
val _ = update_ yyact 32
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : int
in
( Memb((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 33, file ffuncgrm.y, line 77 *)
val _ = update_ yyact 33
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Call((d__3__), (d__1__)) ) end : ffuncast.Expr))
;
(* Rule 34, file ffuncgrm.y, line 79 *)
val _ = update_ yyact 34
(fn () => repr(let
val d__3__ = peekVal 1 : ffuncast.Expr
in
( Print (d__3__) ) end : ffuncast.Expr))
;
(* Rule 35, file ffuncgrm.y, line 80 *)
val _ = update_ yyact 35
(fn () => repr(let
in
( Cr ) end : ffuncast.Expr))
;
(* Rule 36, file ffuncgrm.y, line 81 *)
val _ = update_ yyact 36
(fn () => repr(let
val d__2__ = peekVal 0 : string
in
( Read (d__2__) ) end : ffuncast.Expr))
;
(* Rule 37, file ffuncgrm.y, line 82 *)
val _ = update_ yyact 37
(fn () => repr(let
val d__1__ = peekVal 2 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr
in
( Asign((d__1__), (d__3__)) ) end : ffuncast.Expr))
;
(* Rule 38, file ffuncgrm.y, line 84 *)
val _ = update_ yyact 38
(fn () => repr(let
val d__2__ = peekVal 1 : ffuncast.Expr list
in
( (d__2__) ) end : ffuncast.Expr list))
;
(* Rule 39, file ffuncgrm.y, line 86 *)
val _ = update_ yyact 39
(fn () => repr(let
val d__1__ = peekVal 3 : ffuncast.Expr
val d__3__ = peekVal 1 : ffuncast.Expr
val d__4__ = peekVal 0 : ffuncast.Expr list
in
( (d__1__)::(d__3__)::(d__4__) ) end : ffuncast.Expr list))
;
(* Rule 40, file ffuncgrm.y, line 88 *)
val _ = update_ yyact 40
(fn () => repr(let
val d__2__ = peekVal 1 : ffuncast.Expr
val d__3__ = peekVal 0 : ffuncast.Expr list
in
( (d__2__)::(d__3__) ) end : ffuncast.Expr list))
;
(* Rule 41, file ffuncgrm.y, line 89 *)
val _ = update_ yyact 41
(fn () => repr(let
in
( [] ) end : ffuncast.Expr list))
;
(* Entry prog *)
val _ = update_ yyact 42 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
